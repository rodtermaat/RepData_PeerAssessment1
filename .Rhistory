rnorm
library(nlme)
library(lattice)
xyplot(weight~Time | Diet, BodyWeight)
head(nlme)
head(BodyWeight)
library(datasets)
library(lattice)
data(airquality)
p <- xyplot(Ozone~Wind | factor(Month), data=airquality)
p
xyplot(Ozone~Wind | factor(Month), data=airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
g
print(g)
p <- g + geom_points()
p <- g + geom_point()
p
head(movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
install.packages("e1071")
install.packages("RcmdrPlugin.IPSUR")
library(RcmdrPlugin.IPSUR)
library(e1071)
data(RcmdrTestDrive)
attach(RcmdrTestDrive)
names(RcmdrTestDrive)
summary(RcmdrTestDrive)
table(race)
bargraph(race)
bargraph(race)
barplot(RcmdrTestDrive(table(race)))
barplot(table(race))
library(dplyr)
library(xtable)
dat <- read.csv("./activity.csv")
dat1 <- filter(dat, steps!='NA')
dat2 <- summarise(group_by(dat1, date), sum(steps))
names(dat2)[names(dat2)=="sum(steps)"] <- "steps"
hist(dat2$'steps',
col="red",
xlab="Steps per day",
main="Steps per day Freq")
dat_mean <- mean(dat2$steps)
dat_med <- median(dat2$steps)
dat_mean <- summarise(group_by(dat1, date), mean(steps))
dat_med <- summarise(group_by(dat1, date), median(steps))
xt_mean <- as.data.frame(dat_mean[1:53, 1:2])
print(xtable(xt_mean), type='html', floating=FALSE, include.rownames=F)
dat_interval <- summarise(group_by(dat1, interval), mean(steps))
plot(dat_interval$interval, dat_interval$'mean(steps)', type="l", xlab="Interval", ylab="Avereage Steps")
title(main = "Average Steps per Interval")
names(dat_interval)[names(dat_interval)=="mean(steps)"] <- "steps"
dat_interval2 <- arrange(dat_interval, desc(steps))
big_interval <- dat_interval2$interval[1]
big_value <- dat_interval2$steps[1]
dat_na <- filter(dat, steps=='NA')
setwd("~/Desktop/Coursera_R/RepData_PeerAssessment1")
library(dplyr)
library(xtable)
dat <- read.csv("./activity.csv")
dat1 <- filter(dat, steps!='NA')
dat2 <- summarise(group_by(dat1, date), sum(steps))
names(dat2)[names(dat2)=="sum(steps)"] <- "steps"
hist(dat2$'steps',
col="red",
xlab="Steps per day",
main="Steps per day Freq")
dat_mean <- mean(dat2$steps)
dat_med <- median(dat2$steps)
dat_mean <- summarise(group_by(dat1, date), mean(steps))
dat_med <- summarise(group_by(dat1, date), median(steps))
xt_mean <- as.data.frame(dat_mean[1:53, 1:2])
print(xtable(xt_mean), type='html', floating=FALSE, include.rownames=F)
dat_interval <- summarise(group_by(dat1, interval), mean(steps))
plot(dat_interval$interval, dat_interval$'mean(steps)', type="l", xlab="Interval", ylab="Avereage Steps")
title(main = "Average Steps per Interval")
names(dat_interval)[names(dat_interval)=="mean(steps)"] <- "steps"
dat_interval2 <- arrange(dat_interval, desc(steps))
big_interval <- dat_interval2$interval[1]
big_value <- dat_interval2$steps[1]
dat_na <- filter(dat, steps=='NA')
dat_na
View(dat)
View(dat_mean)
View(dat_na)
dat_na <- filter(dat, steps='NA')
dat_na <- filter(dat, steps=='NA')
dat_na <- filter(dat, steps==0)
dat_na <- filter(dat, steps==NA)
dat_na <- filter(dat, steps=="NA")
View(dat)
View(dat_na)
dat_na <- filter(dat, steps!="NA")
dat_na <- filter(dat, steps=="NA")
dat_na <- filter(dat, steps>0)
dat_na <- filter(dat, steps<0)
View(dat_na)
dat_na <- filter(dat, steps==100)
dat_na <- filter(dat, steps==NA
dat_na <- filter(dat, steps==NA)
dat_na <- filter(dat, steps=='NA')
dat_na <- filter(dat, steps='NA')
dat_na <- filter(dat, is.na(steps))
View(dat_na)
View(dat_na)
length(dat_na)
rows(dat_no)
nrow(dat_na)
View(dat_na)
dat_mean_int <- summarise(group_by(dat1, interval, mean(steps)))
View(dat_mean_int)
